{
  "source_config": {
    "source_map": {
      "SIN_ACRA": {
          "source_export": "person",
          "url_DB": "jdbc:postgresql://localhost:5432/gov_sin_csv",
          "username": "postgres",
          "password": "postgres",
          "fields": [
            {
              "name": "Create procedure for create table statistic and balks",
              "action": "CREATE OR REPLACE PROCEDURE bulk(length integer, materialized varchar, export varchar)
                        LANGUAGE plpgsql AS
                    $$
                    DECLARE
                        value   integer := 0;
                        contor  bigint  := 1;
                        average integer := 0;
                        size    integer;
                    BEGIN
                        CREATE TABLE IF NOT EXISTS statistic
                        (
                            id            bigserial PRIMARY KEY,
                            start         integer,
                            finish        integer,
                            status        BOOLEAN,
                            time          timestamp,
                            size          integer,
                            source_export varchar
                        );
                        IF (SELECT count(*) from statistic) = 0 then
                         EXECUTE FORMAT('SELECT count(*) FROM %s', materialized) INTO size;
                            value = size / length;
                            FOR contor IN (SELECT * FROM generate_series(1, value))
                                LOOP
                                    average := length * contor;
                                    INSERT INTO statistic(start, finish, status, time, size, source_export)
                                    VALUES (average - length + 1, average, false, null, length, export);
                                END LOOP;
                            IF size % length != 0 THEN
                                INSERT INTO statistic(start, finish, status, time, size, source_export)
                                VALUES (average + 1, average + size % length, false, null, size % length, export);
                            END IF;
                        END IF;
                    END
                    $$; "
            },
            {
              "name": "Create index for uen from additional",
              "action": " CREATE INDEX IF NOT EXISTS additional_uen_pk_idx ON additional(uen);"
            },
            {
              "name": "Create materialized view for uen from additional",
              "action": "CREATE materialized VIEW IF NOT EXISTS test AS
                                        SELECT ROW_NUMBER() OVER () AS id, uen
                                        FROM additional
                                        GROUP BY uen
                                        order by id;"
            },
            {
              "name": "Create index for uen from test",
              "action": " CREATE INDEX IF NOT EXISTS test_uen_pk_idx ON test (uen); "
            },
            {
              "name": "Create index for id from test",
              "action": " CREATE INDEX IF NOT EXISTS test_id_pk_idx ON test (id); "
            },
                                {
              "name": "Create PROCEDURE start_export()",
              "action": " CREATE OR REPLACE PROCEDURE start_export()
    language plpgsql
as
$$
BEGIN
    update session
    set session_start_export = now()
    where (Select session_id from profiles where status = true) = id
      and status_import = true;
end;
$$; "
            },
                 {
              "name": "Create PROCEDURE finish_export()",
              "action": " CREATE OR REPLACE PROCEDURE finish_export()
    language plpgsql
as
$$
BEGIN
    update session
    set status_export= true,
        session_finish_export=now(),
        session_time_export = now() - (Select session_start_export from session)
    where session_start_export is not null;
end;
$$; "
            },
            {
              "name": "Call bulk with 100 element from test and export person",
              "action": " call bulk(5000, 'test', 'person');"
            },
             {
              "name": "Create function get_status_export",
              "action": "CREATE OR REPLACE FUNCTION get_status_export()
    returns boolean
language plpgsql
as
    $$
    declare
        status bool;
    begin
       SELECT status_export from session into status;
       return status;
    end;
    $$;"
            },
              {
              "name": "Create procedure create_export_statistic",
              "action": "CREATE OR REPLACE PROCEDURE create_export_statistic(arr varchar[])
    language plpgsql
as
$$
declare
    count bigint := (Select count(*)
                     from additional);
BEGIN
    CREATE TABLE IF NOT EXISTS export_statistic
    (
        id                      BIGSERIAL PRIMARY KEY,
        size                    bigint,
        started_export          timestamp,
        finished_export         timestamp,
        exporting_time          varchar,
        number_of_correct_lines bigint,
        number_of_wrong_lines   bigint,
        wrong_lines             json
    );

    insert into export_statistic(size, started_export, finished_export, exporting_time, number_of_correct_lines,
                                 number_of_wrong_lines, wrong_lines)
    VALUES (count, (Select session_start_export from session),
            (Select session_finish_export from session), (Select session_time_export from session),
            (count - (Select array_length(arr, 1))), (Select array_length(arr, 1)),
            (Select array_to_json(arr)));
end;
$$;"
            },
            {
              "name": "Create function set_in_process",
              "action": "CREATE OR REPLACE FUNCTION set_in_process(export varchar)
                        RETURNS integer
                        LANGUAGE plpgsql AS
                    $$
                    DECLARE
                        first integer;
                    Begin
                        SELECT start from statistic where source_export = export and status = false FOR UPDATE FETCH FIRST ROW ONLY INTO first;
                        UPDATE statistic set status=null,time=now() where start=first;
                        return first;
                    End
                    $$;"

            },
            {
              "name": "Create jsonb for balk with specific start",
              "action": "CREATE OR REPLACE FUNCTION get_data(beginning integer, export varchar)
    RETURNS table
            (
                j json
            )
    LANGUAGE plpgsql
AS
$$
BEGIN
    RETURN QUERY SELECT json_agg(a)
                 from (SELECT *,
                              (SELECT json_build_object('building_name', building_name,
                                                        'street_name', street_name,
                                                        'postal_code', postal_code)
                              )
                       FROM additional) a
                 WHERE uen in (
                     Select uen
                     from test
                     where id between beginning AND (Select finish
                                                     from statistic
                                                     where start = beginning
                                                       AND source_export = export));
    Update statistic set status = true where start = beginning;
END
$$;"

            }
          ]
        }
      }
    }

}
